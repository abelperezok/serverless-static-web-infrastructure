Description: Template to create the infrastructure for a serverless static website development environment

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "External dependencies (US-EAST-1)"
        Parameters:
          - HostedZone
          - SSLCertificate
      -
        Label:
          default: "Domain and Subdomain"
        Parameters:
          - DomainName
          - SubDomainName
          - IncludeRedirectToSubDomain

    ParameterLabels:
      HostedZone:
        default: HostedZone for CloudFront
      SSLCertificate:
        default: SSL certificate
      DomainName:
        default: "Domain name"
      SubDomainName:
        default: "Sub domain"
      IncludeRedirectToSubDomain:
        default: "Include automatic redirection"

Parameters:
  HostedZone:
    Description: Leave as default value as per AWS documents.
    Type: String
    Default: Z2FDTNDATAQYW2
  SSLCertificate:
    Description: The Arn of SSL certificate which must be created / imported in N. Virginia (US-EAST-1) region
    Type: String
  DomainName:
    Description: The site domain name only i.e example.com
    Type: String
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<![.-])
    ConstraintDescription: Must be a valid domain name.
  SubDomainName:
    Description: The site subdomain name only i.e www
    Type: String
    AllowedPattern: (?!-)[a-zA-Z0-9-]{1,15}(?<![.-])
    ConstraintDescription: Must be a valid subdomain name.
  IncludeRedirectToSubDomain:
    Description: Whether it should include a redirection from the naked domain to the subdomain.
    Type: String
    Default: false
    AllowedValues: [true, false]
  LambdaEdgeRedirectFunction:
    Description: The Arn of Lambda@Edge function, it must be in N. Virginia (US-EAST-1) region
    Type: String

Conditions:
  includeRedirect: !Equals [!Ref IncludeRedirectToSubDomain, "true"]


Resources:
  # S3 bucket
  StaticSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  # CloudFront distribution
  WWWCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !If [includeRedirect, !Sub "${DomainName}", !Ref "AWS::NoValue"]
          - !Sub ${SubDomainName}.${DomainName}
        DefaultRootObject: index.html
        CacheBehaviors: []
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          TargetOriginId: S3Bucket
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
            Headers: []
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 31536000
          SmoothStreaming: false
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - !If
                - includeRedirect
                -
                  EventType: viewer-request
                  LambdaFunctionARN: !Ref LambdaEdgeRedirectFunction
                - !Ref "AWS::NoValue"
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !Select [2, !Split ["/", !GetAtt StaticSiteBucket.WebsiteURL]]
            Id: S3Bucket
            CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
        PriceClass: PriceClass_100
        ViewerCertificate:
          SslSupportMethod: sni-only
          AcmCertificateArn: !Ref SSLCertificate
          MinimumProtocolVersion: TLSv1.1_2016

  # Route53 A record
  WWWRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        HostedZoneId: !Ref HostedZone
        DNSName: !GetAtt WWWCloudFront.DomainName
      HostedZoneName: !Sub ${DomainName}.
      Name: !Sub ${SubDomainName}.${DomainName}.
      Type: A
  MainRecordSet:
    Type: AWS::Route53::RecordSet
    Condition: includeRedirect # conditionally created
    Properties:
      AliasTarget:
        HostedZoneId: !Ref HostedZone
        DNSName: !GetAtt WWWCloudFront.DomainName
      HostedZoneName: !Sub ${DomainName}.
      Name: !Sub ${DomainName}.
      Type: A


  # CodeCommit repository
  CodeCommitRepository:
     Type: AWS::CodeCommit::Repository
     Properties:
      RepositoryDescription: Repository to store de source code
      RepositoryName: !Sub ${SubDomainName}.${DomainName}-web
  # CodeCommit user & policy
  CodeCommitUserPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: !Sub CodeCommitUserPolicy for Repo ${CodeCommitRepository.Name}
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Sid: AllowGitCommandlineOperations
          Effect: Allow
          Action:
            - codecommit:GitPull
            - codecommit:GitPush
          Resource: !GetAtt CodeCommitRepository.Arn
  CodeCommitUser:
    Type: AWS::IAM::User
    Properties:
      ManagedPolicyArns:
        - !Ref CodeCommitUserPolicy
  # CodeBuild project, Role and Policy
  CodeBuildUserPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: !Sub CodeBuildUserPolicy for CodeBuild project ${AWS::StackName}-builder
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AccessLogGroupsS3ListObjects
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - s3:ListObjects
            Resource: "*"
          - Sid: AccessGitLogs
            Effect: Allow
            Action:
              - codecommit:GitPull
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-builder
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-builder:*
              - !GetAtt CodeCommitRepository.Arn
          - Sid: AccessS3staticBucket
            Effect: Allow
            Action: s3:*
            Resource:
              - !GetAtt StaticSiteBucket.Arn
              - !Sub ${StaticSiteBucket.Arn}/*
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: /service-role/
      ManagedPolicyArns:
        - !Ref CodeBuildUserPolicy
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-builder
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:7.0.0
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: CODECOMMIT
        Location: !GetAtt CodeCommitRepository.CloneUrlHttp
      TimeoutInMinutes: 5
  # CloudWatch event rule, Role and Policy
  CloudWatchEventRulePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: !Sub CloudWatchEventRulePolicy for CloudWatch event rule ${AWS::StackName}-start-build-rule
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - codebuild:StartBuild
            Resource:
              - !GetAtt CodeBuildProject.Arn
  CloudWatchEventRuleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Path: /service-role/
      ManagedPolicyArns:
        - !Ref CloudWatchEventRulePolicy
  AutomaticBuildRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Connects changes in CodeCommit to start CodeBuild project buid
      RoleArn: !GetAtt CloudWatchEventRuleRole.Arn
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !GetAtt CodeCommitRepository.Arn
      State: ENABLED
      Targets:
        - Arn: !GetAtt CodeBuildProject.Arn
          Id: !Sub ${AWS::StackName}-start-build-rule
          RoleArn: !GetAtt CloudWatchEventRuleRole.Arn


Outputs:
  CodeCommitRepositoryCloneUrlHttp:
    Description: Url to clone the CodeCommit repository via HTTPS
    Value: !GetAtt CodeCommitRepository.CloneUrlHttp
  CodeCommitRepositoryCloneUrlSsh:
    Description: Url to clone the CodeCommit repository via SSH
    Value: !GetAtt CodeCommitRepository.CloneUrlSsh
  S3StaticBucketName:
    Description: S3 bucket to store website files full name
    Value: !Ref StaticSiteBucket